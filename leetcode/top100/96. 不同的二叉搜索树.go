package top100

// 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
//
// 示例:
//
// 输入: 3
// 输出: 5
// 解释:
// 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
//
//   1         3     3      2      1
//    \       /     /      / \      \
//     3     2     1      1   3      2
//    /     /       \                 \
//   2     1         2                 3

// 思路：数学推导，指定 G(n) 为大小为n的序列所能组成的不同二叉数的个数，执行F(i, j)为以i为根j为
// 序列长度的不同二叉数个数，两者关系为：
// G(n) = F(1, n) + ... + F(n, n)
// 又因为 F(i, j)为i左子树和右子树的迪卡尔积，所以
// F(i, j) = G(i - 1) * G(j - i)
// 结合两个函数得到转移方程式
func numTrees(n int) int {
	dp := make([]int, n+1)

	dp[0] = 1
	dp[1] = 1

	for i := 2; i <= n; i++ {
		for j := 1; j <= i; j++ {
			dp[i] += dp[j-1] * dp[i-j]
		}
	}

	return dp[n]
}
