package top100

// 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
//
// 示例 1:
//
// 输入: n = 12
// 输出: 3
// 解释: 12 = 4 + 4 + 4.
// 示例 2:
//
// 输入: n = 13
// 输出: 2
// 解释: 13 = 4 + 9.

// 思路：动态规划，dp[i] = min(dp[i], dp[i - j*j] + 1)
// 意思是最坏情况为i，即i个1相加，然后寻找i-j*j对应的最优解+完全平方数j*j
func numSquares(n int) int {
	dp := make([]int, n+1)

	for i := 1; i <= n; i++ {
		dp[i] = i
		for j := 2; j*j <= i; j++ {
			dp[i] = min(dp[i], dp[i-j*j]+1)
		}
	}

	return dp[n]
}
