package leetcode

// 191. 位1的个数

// 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。

// 示例 1：

// 输入：00000000000000000000000000001011
// 输出：3
// 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
// 示例 2：

// 输入：00000000000000000000000010000000
// 输出：1
// 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
// 示例 3：

// 输入：11111111111111111111111111111101
// 输出：31
// 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

// 提示：

// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

// 思路1：tag从1开始与目标相与，如果结果为本身说明该位是1，计数器加一，然后左移重复上述过程。直到自己变为0说明
// 超过了限定的位数

func hammingWeightFunc1(num uint32) int {
    tag := uint32(1)
    count := 0
    
    for tag != 0 {
        if num & tag == tag {
            count++
        }
        tag = tag << 1
    }
    
    return count
}

// 思路2：将整数减1与原整数相与，这样如果整数最右侧的位子上有1，就会将这个1变为0。有多少个1就可以做多少次这样的操作
// 直到为0为止。

func hammingWeightFunc2(num uint32) int {
    count := 0
    for num != 0 {
        num = (num - 1) & num
        count++
    }
    return count
}