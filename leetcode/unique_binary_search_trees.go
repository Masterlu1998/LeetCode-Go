package leetcode

// 不同的二叉搜索树
// 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
// 示例:
// 输入: 3
// 输出: 5
// 解释:
// 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
//    1         3     3      2      1
//     \       /     /      / \      \
//      3     2     1      1   3      2
//     /     /       \                 \
//    2     1         2                 3

// 思路1：设G(n)为n个节点所能生成的搜索二叉树的数量。设f(i)为i做节点的时候生成的搜索二叉树的数量。
// 可得到等式：G(n) = f(1) + f(2) + .... + f(n)。当i作为根节点的时候，左侧的子树所能生成的搜索二叉树的数量
// 为G(i-1)，右侧的节点所能生成的搜索二叉树数量为G(n-i)。得到等式：f(n) = G(i - 1) * G(n - i)。两个等式相
// 结合得到：G(n) = G(0) * G(n-1) + G(1) * G(n - 2) + ... + G(n - 1) * G(0)
func numTrees(n int) int {
    if n == 0 || n == 1 {
        return 1
    }
    dp := make([]int, n+1)
    dp[0], dp[1] = 1, 1
    
    for i := 2; i <= n; i++ {
        for j := 0; j < i; j++ {
            dp[i] += dp[j] * dp[i-(j+1)]
        }
    }
    return dp[n]
}
